library(Matrix, lib.loc = "C:/Program Files/R/R-4.1.1/library")
library(tidyverse)
setwd("C:/Users/shrey/Desktop/Data607_Communications_in_DS/hw5")
install.packages("ggridges")
library(ggridges)
library(tidyverse)
library(ggridges)
# Example usage:
# data <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
# prop_model(data)
prop_model <- function(data = c(), prior_prop = c(1, 1), n_draws = 10000,
gr_name="Proportion graph") {
#library(tidyverse)
data <- as.logical(data)
# data_indices decides what densities to plot between the prior and the posterior
# For 20 datapoints and less we're plotting all of them.
data_indices <- round(seq(0, length(data), length.out = min(length(data) + 1, 40)))
# dens_curves will be a data frame with the x & y coordinates for the
# denities to plot where x = proportion_success and y = probability
proportion_success <- c(0, seq(0, 1, length.out = 100), 1)
dens_curves <- map_dfr(data_indices, function(i) {
value <- ifelse(i == 0, "Prior", ifelse(data[i], "Success", "Failure"))
label <- paste0("n=", i)
probability <- dbeta(proportion_success,
prior_prop[1] + sum(data[seq_len(i)]),
prior_prop[2] + sum(!data[seq_len(i)]))
probability <- probability / max(probability)
data_frame(value, label, proportion_success, probability)
})
# Turning label and value into factors with the right ordering for the plot
dens_curves$label <- fct_rev(factor(dens_curves$label, levels =  paste0("n=", data_indices )))
dens_curves$value <- factor(dens_curves$value, levels = c("Prior", "Success", "Failure"))
graph_label <- paste("Prior likelihood distribution Beta(a =",
as.character(prior_prop[1]),", b =",
as.character(prior_prop[2]),")")
p <- ggplot(dens_curves, aes(x = proportion_success, y = label,
height = probability, fill = value)) +
ggridges::geom_density_ridges(stat="identity", color = "white", alpha = 0.8,
panel_scaling = TRUE, size = 1) +
scale_y_discrete("", expand = c(0.01, 0)) +
scale_x_continuous("Proportion of success") +
scale_fill_manual(values = hcl(120 * 2:0 + 15, 100, 65), name = "", drop = FALSE,
labels =  c("Prior   ", "Success   ", "Failure   ")) +
ggtitle(paste0(gr_name, ": ", sum(data),  " successes, ", sum(!data), " failures"),
subtitle = graph_label) +
labs(caption = "based on Rasmus Bååth R code") +
theme_light() +
theme(legend.position = "top")
print(p)
# Returning a sample from the posterior distribution that can be further
# manipulated and inspected
posterior_sample <- rbeta(n_draws, prior_prop[1] + sum(data), prior_prop[2] + sum(!data))
invisible(posterior_sample)
}
data <- c( 1, 0, 0, 1 )
prop_model( data )
posterior = prop_model( data )
ggplot(data=posterior) +
geom_density(alpha = 0.2) +
ggtitle("Posterior Probability Distribution")
class(posterior)
type(posterior)
typeof(posterior)
posterior = prop_model( data )
posterior_df = as.data.frame(posterior, col.names = "Prob")
ggplot(data=posterior, mapping=aes(x=Prob)) +
geom_density(alpha = 0.2) +
ggtitle("Posterior Probability Distribution")
ggplot(data=posterior_df, mapping=aes(x=Prob)) +
geom_density(alpha = 0.2) +
ggtitle("Posterior Probability Distribution")
View(posterior_df)
posterior = prop_model( data )
( posterior = prop_model( data ) )
( posterior_df = as.data.frame(posterior) )
head(posterior_df)
ggplot(data=posterior_df, mapping=aes(x=Prob)) +
geom_density(alpha = 0.2) +
ggtitle("Posterior Probability Distribution")
ggplot(data=posterior_df, mapping=aes(x=posterior)) +
geom_density(alpha = 0.2) +
ggtitle("Posterior Probability Distribution")
ggplot(data=posterior_df, mapping=aes(x=posterior)) +
geom_density(alpha = 0.2, col = 'palegreen4') +
ggtitle("Posterior Probability Distribution")
ggplot(data=posterior_df, mapping=aes(x=posterior)) +
geom_density(alpha = 0.2, fill = 'palegreen4') +
ggtitle("Posterior Probability Distribution")
ggplot(data=posterior_df, mapping=aes(x=posterior)) +
geom_density(alpha = 0.2, fill = 'palegreen4') +
geom_vline(aes(xintercept=mean(posterior)),
color="blue", linetype="dashed", size=1) +
ggtitle("Posterior Probability Distribution")
library(tibble)
library(ggplot2)
library(tidyverse)
#### split violin func #####
GeomSplitViolin <- ggproto("GeomSplitViolin", GeomViolin,
draw_group = function(self, data, ..., draw_quantiles = NULL) {
data <- transform(data, xminv = x - violinwidth * (x - xmin), xmaxv = x + violinwidth * (xmax - x))
grp <- data[1, "group"]
newdata <- plyr::arrange(transform(data, x = if (grp %% 2 == 1) xminv else xmaxv), if (grp %% 2 == 1) y else -y)
newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
newdata[c(1, nrow(newdata) - 1, nrow(newdata)), "x"] <- round(newdata[1, "x"])
if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <=
1))
quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
aesthetics$alpha <- rep(1, nrow(quantiles))
both <- cbind(quantiles, aesthetics)
quantile_grob <- GeomPath$draw_panel(both, ...)
ggplot2:::ggname("geom_split_violin", grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
}
else {
ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
}
})
geom_split_violin <- function(mapping = NULL, data = NULL, stat = "ydensity", position = "identity", ...,
draw_quantiles = NULL, trim = TRUE, scale = "area", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE) {
layer(data = data, mapping = mapping, stat = stat, geom = GeomSplitViolin,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(trim = trim, scale = scale, draw_quantiles = draw_quantiles, na.rm = na.rm, ...))
}
# loading the data set
clev <- read.csv("processed.cleveland.data", header=FALSE)
# renaming the columns
colnames(clev) <- c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg",
"thalach", "exang", "oldpeak", "slope", "ca", "thal",
"num")
# converting data.frame to tibble
library(tibble)
clev_data <- as_tibble(clev)
clev_data
# converting ca and thal variables to float
clev_data$ca <- as.numeric(clev_data$ca)
clev_data$thal <- as.numeric(clev_data$thal)
# adding outcome variable
clev_data <- mutate(clev_data,
outcome = (num!=0))
# checking for missing values
clev_data
sapply(clev_data, function(x) sum(is.na(x)))
# removing rows with missing values
clev_data <- filter(clev_data, !is.na(clev_data$ca), !is.na(clev_data$thal))
sapply(clev_data, function(x) sum(is.na(x)))
clev_data
# converting categorical variables to factors from numeric
clev_data$sex <- factor(clev_data$sex, levels = c(0, 1),
labels = c("Female", "Male"))
clev_data$cp <- factor(clev_data$cp, levels = c(1, 2, 3, 4),
labels = c("typical angina", "atypical angina", "non-anginal pain", "asymptomatic"))
clev_data$fbs <- factor(clev_data$fbs, levels = c(0, 1),
labels = c("fbs <= 120 mg/dl", "fbs > 120 mg/dl"))
clev_data$restecg <- factor(clev_data$restecg, levels = c(0, 1, 2),
labels = c("normal", 1, 2))
clev_data$exang <- factor(clev_data$exang, levels = c(0, 1),
labels = c("No", "Yes"))
clev_data$slope <- factor(clev_data$slope, levels = c(1, 2, 3),
labels = c("upsloping", "flat", "downsloping"))
clev_data$ca <- as.factor(clev_data$ca)
clev_data$thal <- factor(clev_data$thal, levels = c(3, 6, 7),
labels = c("normal", "fixed defect", "reversible defect"))
clev_data$num <- as.factor(clev_data$num)
clev_data$outcome <- factor(clev_data$outcome, levels = c(FALSE, TRUE),
labels = c(0, 1))
clev_data
summary(clev_data)
str(clev_data)
# violin plot, prevalence
ggplot(data = clev_data, mapping = aes(x = outcome, y = age, fill = sex)) +
geom_split_violin() +
stat_summary(fun.y=median, geom="point", color="black", size=2, shape=23) +
facet_wrap(~ fbs, nrow = 2) +
labs(x = "Diagnosis", y = "Age", shape = "median") +
ggtitle("Prevalence of heart disease spread across age groups (w/ fasting blood sugar data)")
ggplot(data=clev_data, mapping=aes(x=age, fill=sex)) +
geom_density(alpha = 0.2) +
facet_wrap(~ num, nrow = 1) +
ggtitle("Prevalence of heart disease spread across age groups for male and female population of Cleveland")
data <- c( 1, 0, 0, 1 )
posterior = prop_model( data )
library(bayestestR)
library(dplyr)
library(ggplot2)
# Compute HDI and ETI
ci_hdi <- ci(posterior, method = "HDI")
ci_eti <- ci(posterior, method = "ETI")
# Plot the distribution and add the limits of the two CIs
posterior %>%
estimate_density(extend=TRUE) %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "orange") +
theme_classic() +
# HDI in blue
geom_vline(xintercept = ci_hdi$CI_low, color = "royalblue", size = 3) +
geom_vline(xintercept = ci_hdi$CI_high, color = "royalblue", size = 3) +
# Quantile in red
geom_vline(xintercept = ci_eti$CI_low, color = "red", size = 1) +
geom_vline(xintercept = ci_eti$CI_high, color = "red", size = 1)
data <- c( 1, 0, 0, 1 )
posterior = prop_model( data )
library(bayestestR)
library(dplyr)
library(ggplot2)
( ci_hdi <- ci(posterior, method = "HDI") )
( ci_eti <- ci(posterior, method = "ETI") )
# Plot the distribution and add the limits of the two CIs
posterior %>%
estimate_density(extend=TRUE) %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "orange") +
theme_classic() +
# HDI in blue
geom_vline(xintercept = ci_hdi$CI_low, color = "royalblue", size = 3) +
geom_vline(xintercept = ci_hdi$CI_high, color = "royalblue", size = 3) +
# Quantile in red
geom_vline(xintercept = ci_eti$CI_low, color = "red", size = 1) +
geom_vline(xintercept = ci_eti$CI_high, color = "red", size = 1)
ci_hdi[0]
ci_hdi
library(prettydoc)
